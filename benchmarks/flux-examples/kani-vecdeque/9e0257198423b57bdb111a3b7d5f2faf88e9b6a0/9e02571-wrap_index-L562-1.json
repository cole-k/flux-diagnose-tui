{
  "error_name": "9e02571-wrap_index-L562-1",
  "error": {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/cole/git/flux-examples/kani-vecdeque#vecdeque@0.1.0",
    "manifest_path": "/Users/cole/git/flux-examples/kani-vecdeque/Cargo.toml",
    "target": {
      "kind": [
        "dylib",
        "rlib"
      ],
      "crate_types": [
        "dylib",
        "rlib"
      ],
      "name": "vecdeque",
      "src_path": "/Users/cole/git/flux-examples/kani-vecdeque/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "message": "refinement type error",
      "code": {
        "code": "E0999",
        "explanation": null
      },
      "level": "error",
      "spans": [
        {
          "file_name": "src/vec_deque.rs",
          "byte_start": 16784,
          "byte_end": 16813,
          "line_start": 562,
          "line_end": 562,
          "column_start": 5,
          "column_end": 34,
          "is_primary": true,
          "text": [
            {
              "text": "    assert(is_power_of_two(size));",
              "highlight_start": 5,
              "highlight_end": 34
            }
          ],
          "label": "a precondition cannot be proved",
          "suggested_replacement": null,
          "suggestion_applicability": null
        }
      ],
      "children": [
        {
          "message": "this is the condition that cannot be proved",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 17269,
              "byte_end": 17273,
              "line_start": 583,
              "line_end": 583,
              "column_start": 21,
              "column_end": 25,
              "is_primary": true,
              "text": [
                {
                  "text": "#[flux::sig(fn(bool[true]))]",
                  "highlight_start": 21,
                  "highlight_end": 25
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "constraint that could not be proven: `is_power_of_two(size) = true`",
          "code": null,
          "level": "note",
          "spans": [],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "try adding a refinement to the function `vec_deque::is_power_of_two`",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 17159,
              "byte_end": 17174,
              "line_start": 578,
              "line_end": 578,
              "column_start": 4,
              "column_end": 19,
              "is_primary": true,
              "text": [
                {
                  "text": "fn is_power_of_two(n: usize) -> bool {",
                  "highlight_start": 4,
                  "highlight_end": 19
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "`is_power_of_two(size)` defined here",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 16791,
              "byte_end": 16812,
              "line_start": 562,
              "line_end": 562,
              "column_start": 12,
              "column_end": 33,
              "is_primary": true,
              "text": [
                {
                  "text": "    assert(is_power_of_two(size));",
                  "highlight_start": 12,
                  "highlight_end": 33
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        }
      ],
      "rendered": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:562:5\n    |\n562 |     assert(is_power_of_two(size));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:583:21\n    |\n583 | #[flux::sig(fn(bool[true]))]\n    |                     ^^^^\n    = note: constraint that could not be proven: `is_power_of_two(size) = true`\nnote: try adding a refinement to the function `vec_deque::is_power_of_two`\n   --> src/vec_deque.rs:578:4\n    |\n578 | fn is_power_of_two(n: usize) -> bool {\n    |    ^^^^^^^^^^^^^^^\nnote: `is_power_of_two(size)` defined here\n   --> src/vec_deque.rs:562:12\n    |\n562 |     assert(is_power_of_two(size));\n    |            ^^^^^^^^^^^^^^^^^^^^^\n\n",
      "$message_type": "diagnostic"
    }
  },
  "fixes": [
    {
      "fix_lines": [
        {
          "line": 560,
          "file": "src/vec_deque.rs",
          "added_reft": "index: {v: size(v)}"
        },
        {
          "line": 578,
          "file": "src/vec_deque.rs",
          "added_reft": "trusted"
        }
      ],
      "note": "is_power_of_two needs to be trusted",
      "is_trivial": false
    }
  ],
  "error_lines": [
    {
      "line": 562,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 583,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 578,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 562,
      "file": "src/vec_deque.rs"
    }
  ]
}