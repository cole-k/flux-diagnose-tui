{
  "error_name": "5103eb8-copy_nonoverlapping-L145-1",
  "error": {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/cole/git/flux-examples/kani-vecdeque#vecdeque@0.1.0",
    "manifest_path": "/Users/cole/git/flux-examples/kani-vecdeque/Cargo.toml",
    "target": {
      "kind": [
        "dylib",
        "rlib"
      ],
      "crate_types": [
        "dylib",
        "rlib"
      ],
      "name": "vecdeque",
      "src_path": "/Users/cole/git/flux-examples/kani-vecdeque/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "message": "refinement type error",
      "code": {
        "code": "E0999",
        "explanation": null
      },
      "level": "error",
      "spans": [
        {
          "file_name": "src/vec_deque.rs",
          "byte_start": 4988,
          "byte_end": 5019,
          "line_start": 145,
          "line_end": 145,
          "column_start": 9,
          "column_end": 40,
          "is_primary": true,
          "text": [
            {
              "text": "        assert(src + len <= self.cap());",
              "highlight_start": 9,
              "highlight_end": 40
            }
          ],
          "label": "a precondition cannot be proved",
          "suggested_replacement": null,
          "suggestion_applicability": null
        }
      ],
      "children": [
        {
          "message": "this is the condition that cannot be proved",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 18707,
              "byte_end": 18711,
              "line_start": 607,
              "line_end": 607,
              "column_start": 21,
              "column_end": 25,
              "is_primary": true,
              "text": [
                {
                  "text": "#[flux::sig(fn(bool[true]))]",
                  "highlight_start": 21,
                  "highlight_end": 25
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "constraint that could not be proven: `(src + len ≤ self.cap()) = true`",
          "code": null,
          "level": "note",
          "spans": [],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "try adding a refinement to the function `vec_deque::VecDeque::<T, A>::cap`",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 3460,
              "byte_end": 3463,
              "line_start": 101,
              "line_end": 101,
              "column_start": 8,
              "column_end": 11,
              "is_primary": true,
              "text": [
                {
                  "text": "    fn cap(&self) -> usize {",
                  "highlight_start": 8,
                  "highlight_end": 11
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "`self.cap()` defined here",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 5008,
              "byte_end": 5018,
              "line_start": 145,
              "line_end": 145,
              "column_start": 29,
              "column_end": 39,
              "is_primary": true,
              "text": [
                {
                  "text": "        assert(src + len <= self.cap());",
                  "highlight_start": 29,
                  "highlight_end": 39
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "`len` defined here",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 4898,
              "byte_end": 4901,
              "line_start": 142,
              "line_end": 142,
              "column_start": 66,
              "column_end": 69,
              "is_primary": true,
              "text": [
                {
                  "text": "    unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) {",
                  "highlight_start": 66,
                  "highlight_end": 69
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        },
        {
          "message": "`src` defined here",
          "code": null,
          "level": "note",
          "spans": [
            {
              "file_name": "src/vec_deque.rs",
              "byte_start": 4886,
              "byte_end": 4889,
              "line_start": 142,
              "line_end": 142,
              "column_start": 54,
              "column_end": 57,
              "is_primary": true,
              "text": [
                {
                  "text": "    unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) {",
                  "highlight_start": 54,
                  "highlight_end": 57
                }
              ],
              "label": null,
              "suggested_replacement": null,
              "suggestion_applicability": null
            }
          ],
          "children": [],
          "rendered": null,
          "$message_type": null
        }
      ],
      "rendered": "error[E0999]: refinement type error\n   --> src/vec_deque.rs:145:9\n    |\n145 |         assert(src + len <= self.cap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a precondition cannot be proved\n    |\nnote: this is the condition that cannot be proved\n   --> src/vec_deque.rs:607:21\n    |\n607 | #[flux::sig(fn(bool[true]))]\n    |                     ^^^^\n    = note: constraint that could not be proven: `(src + len ≤ self.cap()) = true`\nnote: try adding a refinement to the function `vec_deque::VecDeque::<T, A>::cap`\n   --> src/vec_deque.rs:101:8\n    |\n101 |     fn cap(&self) -> usize {\n    |        ^^^\nnote: `self.cap()` defined here\n   --> src/vec_deque.rs:145:29\n    |\n145 |         assert(src + len <= self.cap());\n    |                             ^^^^^^^^^^\nnote: `len` defined here\n   --> src/vec_deque.rs:142:66\n    |\n142 |     unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) {\n    |                                                                  ^^^\nnote: `src` defined here\n   --> src/vec_deque.rs:142:54\n    |\n142 |     unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) {\n    |                                                      ^^^\n\n",
      "$message_type": "diagnostic"
    }
  },
  "fixes": [
    {
      "fix_lines": [
        {
          "line": 142,
          "file": "src/vec_deque.rs",
          "added_reft": "src: {v: v + len <= self.cap}"
        }
      ],
      "note": null
    }
  ],
  "error_lines": [
    {
      "line": 145,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 607,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 101,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 145,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 142,
      "file": "src/vec_deque.rs"
    },
    {
      "line": 142,
      "file": "src/vec_deque.rs"
    }
  ]
}